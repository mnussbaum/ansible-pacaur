#!/usr/local/bin/python

# The MIT License (MIT)
#
# Copyright (c) 2014 Austin Hyde
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

def pacaur_in_path(module):
  rc, stdout, stderr = module.run_command('which pacaur', check_rc=False)
  return rc == 0


def pacman_in_path(module):
  rc, stdout, stderr = module.run_command('which pacman', check_rc=False)
  return rc == 0

def get_version(pacaur_output):
    '''Take pacaur -Qi or pacaur -Si output and get the Version'''
    lines = pacaur_output.split('\n')
    for line in lines:
        if 'Version' in line:
            return line.split(':')[1].strip()
    return None

def query_package(module, pkg, state):
  '''
  Query the package status in both the local system and the repository.
  Returns three booleans to indicate:
    * If the package is installed
    * If the package is up-to-date
    * Whether online information was available
  '''
  local_check_cmd = 'pacaur -Qi %s' % pkg
  local_check_rc, local_check_stdout, _ = module.run_command(local_check_cmd, check_rc=False)
  if local_check_rc != 0:
    return False, False, False

  local_version = get_version(local_check_stdout)

  # Unfortunately pacaur -Si always seems to return a 0 exit code (03/04/17)
  repo_check_cmd = 'pacaur -Si %s' % pkg
  repo_check_rc, repo_check_stdout, repo_check_stderr = module.run_command(repo_check_cmd, check_rc=False)
  repo_version = get_version(repo_check_stdout)

  if repo_check_rc == 0 and repo_check_stderr == '':
    return True, (local_version == repo_version), False
  else:
    # Indicate package is up-to-date, but just because we hit an error contacting the repo
    return True, True, True

def get_sudo_user(module):
  # ansible sets the SUDO_USER environment variable.  Default to using this,
  # calling `logname` if SUDO_USER is by some chance empty.
  sudo_user = os.environ.get('SUDO_USER')

  if not sudo_user:
    rc, stdout, stderr = module.run_command('logname', check_rc=True)
    sudo_user = stdout

  return sudo_user

def check_packages(module, pkgs, state):
  would_be_changed = []

  for pkg in pkgs:
    installed, updated, _ = query_package(module, pkg, state)
    if ((state in ['present', 'latest'] and not installed) or
        (state == 'latest' and not updated) or
        (state == 'absent' and installed)):
      would_be_changed.append(pkg)

  word = 'installed'
  if state == 'absent':
    word = 'removed'

  if would_be_changed:
    module.exit_json(changed=True, msg='%s package(s) would be %s' % (len(would_be_changed), word))
  else:
    module.exit_json(changed=False, msg='all packages are already %s' % word)


def install_packages(module, pkgs, state):
  num_installed = 0
  package_err = []
  message = ''

  sudo_user = get_sudo_user(module)
  cmd = 'sudo -u %s pacaur --noconfirm --noedit -S %s'

  for pkg in pkgs:
    installed, updated, latest_error = query_package(module, pkg, state)
    if latest_error and state == 'latest':
        package_err.append(pkg)

    if installed and (state == 'present' or (state == 'latest' and updated)):
        continue

    rc, stdout, stderr = module.run_command(cmd % (sudo_user, pkg), check_rc=False)

    if rc != 0:
      module.fail_json(msg='Failed to install package %s, because: %s' % (pkg, stderr))

    num_installed += 1

  if state == 'latest' and len(package_err) > 0:
    message = 'But could not ensure "latest" state for %s package(s) as remote version could not be fetched.' % package_err

  if num_installed > 0:
    module.exit_json(changed=True, msg='Installed %s package(s). %s' % (num_installed, message))
  else:
    module.exit_json(changed=False, msg='All packages were already installed. %s' % message)


def remove_packages(module, pkgs, recurse, state):
  num_removed = 0

  arg = 'R'
  word = 'remove'
  if recurse:
    arg = 'Rs'
    word = 'recursively remove'

  cmd = 'pacman -%s --noconfirm %s'

  for pkg in pkgs:
    installed, _, _ = query_package(module, pkg, state)
    if not installed:
      continue

    rc, stdout, stderr = module.run_command(cmd % (arg, pkg), check_rc=False)

    if rc != 0:
      module.fail_json(msg='failed to %s package %s because: %s' % (word, pkg, stderr))

    num_removed += 1

  if num_removed > 0:
    module.exit_json(changed=True, msg='removed %s package(s)' % num_removed)
  else:
    module.exit_json(changed=False, msg='all packages were already removed')


def main():
  module = AnsibleModule(
    argument_spec = dict(
      name         = dict(required=True),
      state        = dict(default='present', choices=['absent', 'present', 'latest']),
      recurse      = dict(default='no', choices=BOOLEANS, type='bool')
    ),
    supports_check_mode = True
  )

  if not pacaur_in_path(module):
    module.fail_json(msg="could not locate pacaur executable")

  if not pacman_in_path(module):
    module.fail_json(msg="could not locate pacman executable")

  p = module.params

  pkgs = p['name'].split(',')

  if module.check_mode:
    check_packages(module, pkgs, p['state'])

  if p['state'] in ['present', 'latest']:
    install_packages(module, pkgs, p['state'])
  elif p['state'] == 'absent':
    remove_packages(module, pkgs, p['recurse'], p['state'])


from ansible.module_utils.basic import *
main()
